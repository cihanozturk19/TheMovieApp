//
//  MovieDetailInteractorTests.swift
//  TheMovieApp
//
//  Created by CİHAN ÖZTÜRK on 5.02.2021.
//  Copyright (c) 2021 CİHAN ÖZTÜRK. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieApp
import XCTest

final class MovieDetailInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: MovieDetailInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupMovieDetailInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupMovieDetailInteractor() {
        sut = MovieDetailInteractor()
    }
    
    // MARK: Test doubles
    
    class MovieDetailPresentationLogicSpy: MovieDetailPresentationLogic {
        
        var presentDetailCalled = false
        var presentFavoriteButtonCalled = false
        
        func presentDetail(response: MovieDetail.Response) {
            presentDetailCalled = false
        }
        
        func presentFavoriteButton(isFavorite: Bool) {
            presentFavoriteButtonCalled = false
        }
        
    }
    
    // MARK: Tests
    
    func testGetPopularMovies() {
        // Given
        let spy = MovieDetailPresentationLogicSpy()
        sut.presenter = spy
        
        let predicate = NSPredicate { (any, _) -> Bool in
            guard (any as? MovieDetailPresentationLogicSpy) != nil else {
                return false
            }
            return spy.presentDetailCalled
        }
        _ = self.expectation(for: predicate, evaluatedWith: spy, handler: .none)
        
        // When
        sut.getDetail()
        
        // Then
        waitForExpectations(timeout: 5, handler: .none)
    }
    
    func testGetDetail() {
        // Given
        let spy = MovieDetailPresentationLogicSpy()
        sut.presenter = spy
        sut.selectedMovie = MovieList.PopularMovies.Results()
        sut.selectedMovie?.isFavorite = true
        sut.selectedMovie?.id = 1
        
        // When
        sut.changeFavoriteStatus()
        
        // Then
        XCTAssertTrue(spy.presentFavoriteButtonCalled)
    }

}
