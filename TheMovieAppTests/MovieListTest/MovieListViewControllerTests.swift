//
//  MovieListViewControllerTests.swift
//  TheMovieApp
//
//  Created by CİHAN ÖZTÜRK on 4.02.2021.
//  Copyright (c) 2021 CİHAN ÖZTÜRK. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieApp
import XCTest

final class MovieListViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: MovieListViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupMovieListViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupMovieListViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "MovieListViewController") as? MovieListViewController
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class MovieListBusinessLogicSpy: MovieListBusinessLogic {
       
        var getPopularMoviesCalled: Bool = false
        var didSelectItemCalled: Bool = false
        var filterMoviesCalled: Bool = false
        var resetFilterCalled: Bool = false
        var reloadDataCalled: Bool = false
        var loadMoreCalled: Bool = false

        func getPopularMovies(page: String) {
            getPopularMoviesCalled = true
        }
        
        func didSelectItem(item: MovieList.PopularMovies.Results) {
            didSelectItemCalled = true
        }
        
        func filterMovies(searchText: String) {
            filterMoviesCalled = true
        }
        
        func resetFilter() {
            resetFilterCalled = true
        }
        
        func reloadData() {
            reloadDataCalled = true
        }
        
        func loadMore(indexPath: IndexPath) {
            loadMoreCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testShouldDo_getPopularMovies_whenViewIsLoaded() {
        // Given
        let spy = MovieListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.getPopularMoviesCalled, "viewDidLoad() should ask the interactor to do getPopularMovies")
    }
    
    func testDidSelectItem() {
        // Given
        let spy = MovieListBusinessLogicSpy()
        sut.interactor = spy
        sut.viewModel = MovieList.PopularMovies.ViewModel(page: 0,
                                                          results: [MovieList.PopularMovies.Results()],
                                                          total_pages: 10)

        let collectionView = sut.view.viewWithTag(100) as? UICollectionView
        // When
        sut.collectionView(collectionView!, didSelectItemAt: IndexPath(row: 0, section: 0))
        
        // Then
        XCTAssertTrue(spy.getPopularMoviesCalled, "viewDidLoad() should ask the interactor to do getPopularMovies")
    }
    
    func testFilterMovies() {
        // Given
        let spy = MovieListBusinessLogicSpy()
        sut.interactor = spy
        let searchBar = sut.view.viewWithTag(101) as? UISearchBar

        // When
        sut.searchBar(searchBar!, textDidChange: "Test")
        
        // Then
        XCTAssertTrue(spy.filterMoviesCalled, "viewDidLoad() should ask the interactor to do filterMovies")
    }
    
    func testResetFilter() {
        // Given
        let spy = MovieListBusinessLogicSpy()
        sut.interactor = spy
        let searchBar = sut.view.viewWithTag(101) as? UISearchBar

        // When
        sut.searchBar(searchBar!, textDidChange: "")

        // Then
        XCTAssertTrue(spy.resetFilterCalled, "viewDidLoad() should ask the interactor to do resetFilter")
    }
    
    func testReloadData() {
        // Given
        let spy = MovieListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        sut.reloadData()

        // Then
        XCTAssertTrue(spy.reloadDataCalled, "viewDidLoad() should ask the interactor to do reloadData")
    }
    
    func testLoadMore() {
        // Given
        let spy = MovieListBusinessLogicSpy()
        sut.interactor = spy

        let collectionView = sut.view.viewWithTag(100) as? UICollectionView

        // When
        sut.collectionView(collectionView!, willDisplay: UICollectionViewCell(), forItemAt: IndexPath(row: 0, section: 0))

        // Then
        XCTAssertTrue(spy.loadMoreCalled, "viewDidLoad() should ask the interactor to do loadMore")
    }
}
