//
//  MovieListInteractorTests.swift
//  TheMovieApp
//
//  Created by CİHAN ÖZTÜRK on 4.02.2021.
//  Copyright (c) 2021 CİHAN ÖZTÜRK. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheMovieApp
import XCTest

final class MovieListInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: MovieListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupMovieListInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupMovieListInteractor() {
        sut = MovieListInteractor()
    }
    
    // MARK: Test doubles
    
    class MovieListPresentationLogicSpy: MovieListPresentationLogic {
        
        var presentMoviesCalled = false
        var presentDetailCalled = false
        
        func presentMovies(response: MovieList.PopularMovies.Response) {
            presentMoviesCalled = true
        }
        
        func presentDetail() {
            presentDetailCalled = true
        }
    }
    
    // MARK: Tests
    
    func testGetPopularMovies() {
        // Given
        let spy = MovieListPresentationLogicSpy()
        sut.presenter = spy
        
        let predicate = NSPredicate { (any, _) -> Bool in
            guard (any as? MovieListPresentationLogicSpy) != nil else {
                return false
            }
            return spy.presentMoviesCalled
        }
        _ = self.expectation(for: predicate, evaluatedWith: spy, handler: .none)
        
        // When
        sut.getPopularMovies(page: "1")
        
        // Then
        waitForExpectations(timeout: 5, handler: .none)
    }
    
    func testGetDetail() {
        // Given
        let spy = MovieListPresentationLogicSpy()
        sut.presenter = spy
        
        let selectedMovie = MovieList.PopularMovies.Results()
        
        // When
        sut.didSelectItem(item: selectedMovie)
        
        // Then
        XCTAssertTrue(spy.presentDetailCalled)
    }
    
    func testFilterMovies() {
        // Given
        let spy = MovieListPresentationLogicSpy()
        sut.presenter = spy

        var movie = MovieList.PopularMovies.Results()
        movie.title = "test"
        sut.filterResponse = MovieList.PopularMovies.Response(page: 0, results: [movie], total_pages: 10, total_results: 100)
        sut.response = MovieList.PopularMovies.Response(page: 0, results: [movie], total_pages: 10, total_results: 100)
        
        // When
        sut.filterMovies(searchText: "test")
        
        // Then
        XCTAssertTrue(spy.presentMoviesCalled)
    }
    
    func testResetFilter() {
        // Given
        let spy = MovieListPresentationLogicSpy()
        sut.presenter = spy
        sut.response = MovieList.PopularMovies.Response(page: 0, results: nil, total_pages: 10, total_results: 100)
        
        // When
        sut.resetFilter()
        
        // Then
        XCTAssertTrue(spy.presentMoviesCalled)
    }
    /*
     
     func filterMovies(searchText: String) {
         isSearch = true
         filterResponse?.results = response?.results?.filter({ $0.title?.range(of: searchText,
                                                                              options: [.caseInsensitive, .anchored]) != nil })
         presenter?.presentMovies(response: filterResponse!)
     }
     
     func resetFilter() {
         isSearch = false
         filterResponse = response
         presenter?.presentMovies(response: filterResponse!)
     }
     **/
}
